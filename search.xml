<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>First Post here!</title>
    <url>/2022/12/26/First-Post-here/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>原有WordPress数据被放弃，直接利用Hexo重新建站。</p>
<p>目前本blog还只是个人实验性质的玩具，短期内不会有实际内容产出。</p>
<p>当然，目前也没有评论系统，因为我还没想好要用那个套件。</p>
<p>Have fun!</p>
]]></content>
      <categories>
        <category>Status Update</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>wordpress</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo建站体验</title>
    <url>/2022/12/29/talk-about-hexo/</url>
    <content><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>经过几天的调整，这个使用Next主题运行的GitHub Pages上的Hexo系统基本上可以正常运行了。</p>
<h1 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h1><p>Hexo是静态blog系统，简单来说就是这东西会先把你写好的东西渲染成html文件，再交给httpd监听。Hexo本质上是一个后台，最终展现出来的效果大量依赖主题和各类第三方模块。</p>
<p>Next是Hexo的一个很著名的主题，在配置文件中内置了大量的功能，让用户可以在尽量少接触代码的情况下完成站点管理。</p>
<p>GitHub Pages给用户提供了一个简单的httd实例，允许用户运行简单的网站。</p>
<p>接下来就简单讨论一下整体建站体验和一些使用细节。</p>
<span id="more"></span>

<h1 id="Hexo优缺点"><a href="#Hexo优缺点" class="headerlink" title="Hexo优缺点"></a>Hexo优缺点</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul>
<li>静态页面确实快</li>
<li>支持很多部署方式</li>
<li>文档非常成熟</li>
<li>利用GitHub Pages建站可靠性好</li>
<li>生态系统不错</li>
</ul>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><h3 id="纯粹为工程师服务"><a href="#纯粹为工程师服务" class="headerlink" title="纯粹为工程师服务"></a>纯粹为工程师服务</h3><p>不论是github建站、vps上面跑git还是其他部署方式，本地操作-部署-在线运行的模式对于站长来说无异于脱了裤子放屁。</p>
<p>而对于只是想找个环境写写字的用户，这种操作逻辑根本无从下手。</p>
<h3 id="不存在多用户创作"><a href="#不存在多用户创作" class="headerlink" title="不存在多用户创作"></a>不存在多用户创作</h3><p>Hexo根本没有考虑多用户，有一些旁门左道的办法可以实现，但是相信我，能看懂怎么做的人都自己建站了。</p>
<h3 id="核心功能缺失"><a href="#核心功能缺失" class="headerlink" title="核心功能缺失"></a>核心功能缺失</h3><p>大量对于blog来说非常基础的功能都要依赖第三方的插件或服务，甚至连评论系统都欠奉。</p>
<p>一方面，一个系统引入的外部组件越多，各组件之间的版本兼容关系就越复杂，集成需要的调试也越多，后续需要编写的文档就更多。</p>
<p>另一方面，依赖第三方服务，整个系统的可靠性就会受到更多单点的影响，而且产生的数据也很难集中管理和保护。</p>
<h3 id="没有可视化后台"><a href="#没有可视化后台" class="headerlink" title="没有可视化后台"></a>没有可视化后台</h3><p>这是纯粹为工程师设计的结果，没有所见即所得，更没有文章、页面管理的功能，你要做的是版本管理。</p>
<h1 id="重点讨论"><a href="#重点讨论" class="headerlink" title="重点讨论"></a>重点讨论</h1><h2 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h2><p>由于Hexo不存在评论系统，很多外置的评论系统应运而生，这些评论系统分成三个阵营。</p>
<h3 id="GitHub-Issues类"><a href="#GitHub-Issues类" class="headerlink" title="GitHub Issues类"></a>GitHub Issues类</h3><p>这类评论系统，会把所有评论作为issue处理。</p>
<p>这样做的好处是GitHub作为一个可靠的环境，你的评论数据是很难丢失的。</p>
<p>但是很明显，这些系统是依赖GitHub的，同时读者没有办法进行匿名评论。从某个角度说，利用issues存放评论算不算对GitHub的滥用？</p>
<h3 id="无后端类"><a href="#无后端类" class="headerlink" title="无后端类"></a>无后端类</h3><p>以valine为代表的无后端类评论系统，虽然提供更强大的功能，但同时会引入更多后端。</p>
<p>以waline为例，官方快速上手文档使用LeanCloud创建数据库，并在Vercel中部署server，最后在Hexo中引入客户端，就这样，一个无后端的东西就给你增加了两个后端和一串html代码。</p>
<p>当然你也可以选择其他的serverless服务或利用vps独立部署，但是这斌不会减少运维成本。</p>
<h3 id="第三方服务"><a href="#第三方服务" class="headerlink" title="第三方服务"></a>第三方服务</h3><p>用过blogspot的朋友一定还记得disqus，功能强大，可以更好的管理评论，同时用户很少需要考虑运行状况。</p>
<p>但是这类服务就怕跑路，万一哪天它不干了，你还要考虑系统迁移。</p>
<h3 id="放弃"><a href="#放弃" class="headerlink" title="放弃"></a>放弃</h3><p>当然你也可以选择放弃。</p>
<p><del>放弃这种方式，具有无数据、无后台的巨大优势，适合不打算听别人怎么说的用户。</del></p>
<h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>不仅是视觉效果，Hexo的前端功能全部依赖主题实现，搭配不同主题，Hexo就是完全不同的维护和阅读体验，因此选择主题可能才是一切的开始。</p>
<p>优秀的主题应该具有以下特征：</p>
<ul>
<li>通过配置文件实现快速自定义</li>
<li>基于data files进行深度自定义</li>
<li>自带常见评论系统集成</li>
<li>持续更新</li>
<li>文档全面</li>
</ul>
<h2 id="数据存放"><a href="#数据存放" class="headerlink" title="数据存放"></a>数据存放</h2><p>很显然，如果你是在GitHub Pages上部署Hexo，你不应该把媒体文件一并上传到repo里，这不仅是因为容量限制，也是对免费服务的滥用。</p>
<p>因此，如果你的文章中经常用到图片、音频、视频文件，你可能就要找图床、对象存储、视频网站来解决问题了。而这些服务又会引入非常多运维工作量。</p>
<h1 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h1><h2 id="我有很多电脑怎么办？"><a href="#我有很多电脑怎么办？" class="headerlink" title="我有很多电脑怎么办？"></a>我有很多电脑怎么办？</h2><p>把你电脑上的目录同步起来吧，群晖、OneDrive什么的都好，其他电脑上只需要把环境搭好就行了。</p>
<p>当然你也可以选择在每个电脑上搭好环境，把source目录放进另一个branch，每次切换之后做一整套git操作。</p>
<p>相信我，不管用哪一种方法，几次之后，你就不会再想用不同电脑创作了。</p>
<h2 id="注意鉴别文档"><a href="#注意鉴别文档" class="headerlink" title="注意鉴别文档"></a>注意鉴别文档</h2><p>不管是Hexo还是对应的主题，不同版本的变化都很大，查询文档的适合一定要注意对应的版本。</p>
<p>你还要小心鉴别作者自己都没搞懂的文档。</p>
<p>很多文档都告诉你，每次写完新文章，要用<code>hexo clean</code> <code>hexo g</code>  <code>hexo d</code>完成部署，实际上<code>hexo clean</code>更多是在主题样式需改后才需要使用。启动服务器命令<code>hexo s</code>也根本不需要事先静态，这个命令不仅会把source里的东西立刻渲染给你看，还是实时监控source里的更新。</p>
<p>还有一个文档甚至建议在vps上独立部署的hexo直接用nginx反向代理<code>hexo s</code>的监听端口，一堆静态页面你反代它干啥？你还真打算拿Hexo当动态blog用？</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Hexo就像Raspberry Pi，你折腾它的时间一定超过使用的时间。</p>
<p>如果你只是一个想写写字的人，不打算做一个工程师，请立刻绕行，不要再多看一个Hexo的文档。</p>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>wordpress</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>Raspberry Pi不全能</title>
    <url>/2023/01/27/the-limit-of-raspberry-pi/</url>
    <content><![CDATA[<h1 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h1><ul>
<li>包括第四代在内的Raspberry Pi设备，应该只适用于小负载、无加密、多线程的生产和实验环境</li>
<li>不适合高速网络环境中的透明代理、高负载的https服务、各种VPN网关、NAS服务、桌面环境</li>
<li>更适合作为终端而不是服务器</li>
</ul>
<span id="more"></span>

<h1 id="设备弱点"><a href="#设备弱点" class="headerlink" title="设备弱点"></a>设备弱点</h1><h2 id="CPU性能羸弱"><a href="#CPU性能羸弱" class="headerlink" title="CPU性能羸弱"></a>CPU性能羸弱</h2><p>BCM2711性能不足是有目共睹的，落后的制程又让其在高负载运行中温度难以控制，需要类似Argon Neo的这种全金属外壳甚至主动散热来释放温度。</p>
<p>RPi 4的整体性能并不足以支撑一个LXDE环境和各种桌面应用，你甚至很难流畅观看FHD的弹幕视频。</p>
<h2 id="缺少AES-NI"><a href="#缺少AES-NI" class="headerlink" title="缺少AES-NI"></a>缺少AES-NI</h2><p>BCM2711并不带有AES硬件加速功能，AES性能可以用不堪一击形容，4核AES-256性能被i3-8100T单核虚拟机吊打。</p>
<p>当然还有chacha20系的算法可以用，性能要比AES好非常多，可是依然比x86弱不少。</p>
<p>因此，包括传统VPN、wireguard、负载均衡、代理服务器在内的所有涉及加解密的场景，Raspberry Pi都很难提供足够的性能。</p>
<h2 id="缺少PCI-E扩展能力"><a href="#缺少PCI-E扩展能力" class="headerlink" title="缺少PCI-E扩展能力"></a>缺少PCI-E扩展能力</h2><p>除了CM4有一个PCI-E x1的接口以外，所有RPi都没有可以直接可见的PCI-E。</p>
<p>因此，NVMe SSD就不用想了，有线网卡最多可以上2.5Gbe，还会抢占其他USB设备的带宽，并且造成2.4GHz的干扰</p>
<h2 id="供电困难"><a href="#供电困难" class="headerlink" title="供电困难"></a>供电困难</h2><p>按照官方指导文件里的描述，RPi 4应该通过一个至少5V&#x2F;3A的适配器供电，在USB设备总电流不超过500mA时可以使用2.5A适配器，但不支持USB-PD协议。</p>
<p>然而市面上不支持USB-PD但能提供超过3A电流的5V适配器并没有很多选择，大多数通用的适配器和插排都只提供2.4A最大电流。</p>
<h2 id="NTFS问题"><a href="#NTFS问题" class="headerlink" title="NTFS问题"></a>NTFS问题</h2><p>这个问题是整个Linux的问题，但RPi受到的影响尤其明显。</p>
<p>5.15内核并入了NTFS3驱动，可以在低性能的设备上替代NTFS-3G驱动，提供更好的读写性能和更低的开销。但是NTFS3本身还有非常多问题，缺少配套工具、大量bug和兼容性问题、缺少文档。</p>
<p>我手里的三个NTFS设备，有两个可以通过NTFS3挂载，有一个死活不行，找不到任何的文档可以处理或解释这个故障，就算有patch修复这个问题，可又不会并入现有5.15内核，安装新内核还要去backports，这有可能会带来其他问题。而NTFS-3G的性能又非常堪忧，x86设备的性能足够硬扛NTFS-3G，RPi则很容易在高强度读写的情况下挂死。</p>
<h2 id="价格"><a href="#价格" class="headerlink" title="价格"></a>价格</h2><p>这本不是一个问题，Raspberry Pi 4本应该是价格最划算的<em>单板计算机</em>之一，但是Covid-19改变了一切，现在一块4GB内存的RPi 4要价近1k，在这个价格上好的选择非常多。</p>
<h1 id="正确的姿势"><a href="#正确的姿势" class="headerlink" title="正确的姿势"></a>正确的姿势</h1><h2 id="DNS服务器"><a href="#DNS服务器" class="headerlink" title="DNS服务器"></a>DNS服务器</h2><p>旁路DNS服务器可能是老款RPi的正确使用姿势，家用环境下DNS不管多少请求都不会消耗太多性能，也不需要很大的吞吐，不管是PiHole还是AdGuard Home都可以轻松应对。</p>
<p>但是要注意上游DNS如果是TLS的，这负载就要再算算了。</p>
<h2 id="Home-Assistant"><a href="#Home-Assistant" class="headerlink" title="Home Assistant"></a>Home Assistant</h2><p>直接部署HAOS，自带WiFi和蓝牙，无脑连接大量家居设备，还可以对接homekit，打通多方协议。</p>
<h2 id="透明代理"><a href="#透明代理" class="headerlink" title="透明代理"></a>透明代理</h2><p>前面提到了RPi并不适合作为高带宽环境中的透明代理，但是在一个500M以内家用宽带的环境中，RPi 4跑一个chacha20的代理还是可以提供一个令人满意的性能。</p>
<p>独立设备跑透明代理的好处就是可以充分利用clash的自动路由，不需要考虑容器、虚拟化网络的特殊性。</p>
<h2 id="商用"><a href="#商用" class="headerlink" title="商用"></a>商用</h2><p>只要成本划得来、性能跟得上，RPi依然是非常无脑的嵌入式主机。</p>
<p>你猜猜一个RPi 4+显示器套一个铁壳子，插上RFID读卡器，这样一套东西卖给用户几万比较合适？</p>
<h1 id="我想要HomeLab"><a href="#我想要HomeLab" class="headerlink" title="我想要HomeLab"></a>我想要HomeLab</h1><p>是的，我知道很多人在用RPi做轻量的HomeLab主机，甚至感觉还不错。</p>
<p>但是当你的HomeLab出现对第二快RPi的需求的时候，RPi就已经不合适了，这个时候不如搞一套x86的电子垃圾，把家里那些旧电脑留下的DDR4内存、SATA SSD用起来，只需要一块4GB RPi4的预算，你就有机会得到一套至少拥有4核x86内核的全闪存无头主机，而它可以提供的性能和功能都远远超过4GB RPi4。</p>
<p>有x86架构，你可以从容的运行所有可以在RPi上运行的应用，同时还有余力跑一个Windows虚拟机来专门对付各种网盘客户端。</p>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Raspberry Pi</tag>
        <tag>AES-NI</tag>
        <tag>NTFS3</tag>
        <tag>HomeLab</tag>
      </tags>
  </entry>
</search>
